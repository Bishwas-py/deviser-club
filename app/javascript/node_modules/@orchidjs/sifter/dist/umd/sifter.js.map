{"version":3,"file":"sifter.js","sources":["../../lib/diacritics.ts","../../lib/utils.ts","../../lib/sifter.ts"],"sourcesContent":["\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { escape_regex } from './utils.ts';\n\ntype TDiacraticList = {[key:string]:string};\n\n// https://github.com/andrewrk/node-diacritics/blob/master/index.js\n\nvar latin_pat:RegExp;\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}]'; // \\u{2bc}\nconst accent_reg = new RegExp(accent_pat,'gu');\nvar diacritic_patterns:TDiacraticList;\n\nconst latin_convert:TDiacraticList = {\n\t'æ': 'ae',\n\t'ⱥ': 'a',\n\t'ø': 'o',\n};\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|'),'gu');\n\nconst code_points:[[number,number]] = [[ 0, 65535 ]];\n\n/**\n * Remove accents\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n *\n */\nexport const asciifold = (str:string):string => {\n\treturn str\n\t\t.normalize('NFKD')\n\t\t.replace(accent_reg, '')\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,function(foreignletter) {\n\t\t\treturn latin_convert[foreignletter];\n\t\t});\n};\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n *\n */\nexport const arrayToPattern = (chars:string[],glue:string='|'):string =>{\n\n\tif( chars.length == 1 ){\n\t\treturn chars[0];\n\t}\n\n\tvar longest = 1;\n\tchars.forEach((a)=>{longest = Math.max(longest,a.length)});\n\n\tif( longest == 1 ){\n\t\treturn '['+chars.join('')+']';\n\t}\n\n\treturn '(?:'+chars.join(glue)+')';\n};\n\nexport const escapeToPattern = (chars:string[]):string =>{\n\tconst escaped = chars.map((diacritic) => escape_regex(diacritic));\n\treturn arrayToPattern(escaped);\n};\n\n/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n *\n */\nexport const allSubstrings = (input:string):string[][] => {\n\n    if( input.length === 1) return [[input]];\n\n    var result:string[][] = [];\n    allSubstrings(input.substring(1)).forEach(function(subresult) {\n        var tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n\n/**\n * Generate a list of diacritics from the list of code points\n *\n */\nexport const generateDiacritics = (code_points:[[number,number]]):TDiacraticList => {\n\n\tvar diacritics:{[key:string]:string[]} = {};\n\tcode_points.forEach((code_range)=>{\n\n\t\tfor(let i = code_range[0]; i <= code_range[1]; i++){\n\n\t\t\tlet diacritic\t= String.fromCharCode(i);\n\t\t\tlet\tlatin\t\t= asciifold(diacritic);\n\n\t\t\tif( latin == diacritic.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when latin is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// latin صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// latin جل جلاله length 8 code point 65019\n\t\t\tif( latin.length > 3 ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( !(latin in diacritics) ){\n\t\t\t\tdiacritics[latin] = [latin];\n\t\t\t}\n\n\t\t\tvar patt = new RegExp( escapeToPattern(diacritics[latin]),'iu');\n\t\t\tif( diacritic.match(patt) ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdiacritics[latin].push(diacritic);\n\t\t}\n\t});\n\n\t// filter out if there's only one character in the list\n\tlet latin_chars = Object.keys(diacritics);\n\tfor( let i = 0; i < latin_chars.length; i++){\n\t\tconst latin = latin_chars[i];\n\t\tif( diacritics[latin].length < 2 ){\n\t\t\tdelete diacritics[latin];\n\t\t}\n\t}\n\n\n\t// latin character pattern\n\t// match longer substrings first\n\tlatin_chars\t\t= Object.keys(diacritics).sort((a, b) => b.length - a.length );\n\tlatin_pat\t\t= new RegExp('('+ escapeToPattern(latin_chars) + accent_pat + '*)','gu');\n\n\n\t// build diacritic patterns\n\t// ae needs:\n\t//\t(?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n\tvar diacritic_patterns:TDiacraticList = {};\n\tlatin_chars.sort((a,b) => a.length -b.length).forEach((latin)=>{\n\n\t\tvar substrings\t= allSubstrings(latin);\n\t\tvar pattern = substrings.map((sub_pat)=>{\n\n\t\t\tsub_pat = sub_pat.map((l)=>{\n\t\t\t\tif( diacritics.hasOwnProperty(l) ){\n\t\t\t\t\treturn escapeToPattern(diacritics[l]);\n\t\t\t\t}\n\t\t\t\treturn l;\n\t\t\t});\n\n\t\t\treturn arrayToPattern(sub_pat,'');\n\t\t});\n\n\t\tdiacritic_patterns[latin] = arrayToPattern(pattern);\n\t});\n\n\n\treturn diacritic_patterns;\n}\n\n/**\n * Expand a regular expression pattern to include diacritics\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n */\nexport const diacriticRegexPoints = (regex:string):string => {\n\n\tif( diacritic_patterns === undefined ){\n\t\tdiacritic_patterns = generateDiacritics(code_points);\n\t}\n\n\tconst decomposed\t\t= regex.normalize('NFKD').toLowerCase();\n\n\treturn decomposed.split(latin_pat).map((part:string)=>{\n\n\t\t// \"ﬄ\" or \"ffl\"\n\t\tconst no_accent = asciifold(part);\n\t\tif( no_accent == '' ){\n\t\t\treturn '';\n\t\t}\n\n\t\tif( diacritic_patterns.hasOwnProperty(no_accent) ){\n\t\t\treturn diacritic_patterns[no_accent];\n\t\t}\n\n\t\treturn part;\n\t}).join('');\n\n}\n","\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { asciifold } from './diacritics.ts';\n\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport * as T from './types.ts';\n\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttr = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    return obj[name];\n};\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttrNesting = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    var part, names = name.split(\".\");\n\twhile( (part = names.shift()) && (obj = obj[part]));\n    return obj;\n};\n\n/**\n * Calculates how close of a match the\n * given value is against a search token.\n *\n */\nexport const scoreValue = (value:string, token:T.Token, weight:number ):number => {\n\tvar score, pos;\n\n\tif (!value) return 0;\n\n\tvalue = value + '';\n\tpos = value.search(token.regex);\n\tif (pos === -1) return 0;\n\n\tscore = token.string.length / value.length;\n\tif (pos === 0) score += 0.5;\n\n\treturn score * weight;\n};\n\n/**\n *\n * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n */\nexport const escape_regex = (str:string):string => {\n\treturn (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n};\n\n\n/**\n * Cast object property to an array if it exists and has a value\n *\n */\nexport const propToArray = (obj:{[key:string]:any}, key:string) => {\n\tvar value = obj[key];\n\n\tif( typeof value == 'function' ) return value;\n\n\tif( value && !Array.isArray(value) ){\n\t\tobj[key] = [value];\n\t}\n}\n\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:number|string)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\nexport const cmp = (a:number|string, b:number|string) => {\n\tif (typeof a === 'number' && typeof b === 'number') {\n\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t}\n\ta = asciifold(a + '').toLowerCase();\n\tb = asciifold(b + '').toLowerCase();\n\tif (a > b) return 1;\n\tif (b > a) return -1;\n\treturn 0;\n};\n","/**\n * sifter.js\n * Copyright (c) 2013–2020 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n // @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { scoreValue, getAttr, getAttrNesting, escape_regex, propToArray, iterate, cmp } from './utils.ts';\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { diacriticRegexPoints } from './diacritics.ts';\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport * as T from 'types.ts';\n\nexport default class Sifter{\n\n\tpublic items; // []|{};\n\tpublic settings: T.Settings;\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t */\n\tconstructor(items:any, settings:T.Settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t */\n\ttokenize(query:string, respect_word_boundaries?:boolean, weights?:T.Weights ):T.Token[] {\n\t\tif (!query || !query.length) return [];\n\n\t\tconst tokens:T.Token[]\t= [];\n\t\tconst words\t\t\t\t= query.split(/\\s+/);\n\t\tvar field_regex:RegExp;\n\n\t\tif( weights ){\n\t\t\tfield_regex = new RegExp( '^('+ Object.keys(weights).map(escape_regex).join('|')+')\\:(.*)$');\n\t\t}\n\n\t\twords.forEach((word:string) => {\n\t\t\tlet field_match;\n\t\t\tlet field:null|string\t= null;\n\t\t\tlet regex:null|string\t= null;\n\n\t\t\t// look for \"field:query\" tokens\n\t\t\tif( field_regex && (field_match = word.match(field_regex)) ){\n\t\t\t\tfield\t= field_match[1];\n\t\t\t\tword\t= field_match[2];\n\t\t\t}\n\n\t\t\tif( word.length > 0 ){\n\t\t\t\tif( this.settings.diacritics ){\n\t\t\t\t\tregex = diacriticRegexPoints(word);\n\t\t\t\t}else{\n\t\t\t\t\tregex = escape_regex(word);\n\t\t\t\t}\n\t\t\t\tif( respect_word_boundaries ) regex = \"\\\\b\"+regex;\n\t\t\t}\n\n\t\t\ttokens.push({\n\t\t\t\tstring : word,\n\t\t\t\tregex  : regex ? new RegExp(regex,'iu') : null,\n\t\t\t\tfield  : field,\n\t\t\t});\n\t\t});\n\n\t\treturn tokens;\n\t};\n\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @returns {function}\n\t */\n\tgetScoreFunction(query:string, options:T.Options ){\n\t\tvar search = this.prepareSearch(query, options);\n\t\treturn this._getScoreFunction(search);\n\t}\n\n\t_getScoreFunction(search:T.PrepareObj ){\n\t\tconst tokens\t\t= search.tokens,\n\t\ttoken_count\t\t\t= tokens.length;\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\n\t\tconst fields\t= search.options.fields,\n\t\tweights\t\t\t= search.weights,\n\t\tfield_count\t\t= fields.length,\n\t\tgetAttrFn\t\t= search.getAttrFn;\n\n\t\tif (!field_count) {\n\t\t\treturn function() { return 1; };\n\t\t}\n\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t */\n\t\tconst scoreObject = (function() {\n\n\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\t\tconst field = fields[0].field;\n\t\t\t\t\treturn scoreValue(getAttrFn(data, field), token, weights[field]);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\tvar sum = 0;\n\n\t\t\t\t// is the token specific to a field?\n\t\t\t\tif( token.field ){\n\n\t\t\t\t\tconst value = getAttrFn(data, token.field);\n\n\t\t\t\t\tif( !token.regex && value ){\n\t\t\t\t\t\tsum += (1/field_count);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsum += scoreValue(value, token, 1);\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}else{\n\t\t\t\t\titerate(weights, (weight:number, field:string) => {\n\t\t\t\t\t\tsum += scoreValue(getAttrFn(data, field), token, weight);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (token_count === 1) {\n\t\t\treturn function(data:{}) {\n\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar i = 0, score, sum = 0;\n\t\t\t\tfor (; i < token_count; i++) {\n\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar sum = 0;\n\t\t\t\titerate(tokens,(token:T.Token)=>{\n\t\t\t\t\tsum += scoreObject(token, data);\n\t\t\t\t});\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @return function(a,b)\n\t */\n\tgetSortFunction(query:string, options:T.Options) {\n\t\tvar search  = this.prepareSearch(query, options);\n\t\treturn this._getSortFunction(search);\n\t}\n\n\t_getSortFunction(search:T.PrepareObj){\n\t\tvar i, n, implicit_score;\n\n\t\tconst self\t= this,\n\t\toptions\t\t= search.options,\n\t\tsort\t\t= (!search.query && options.sort_empty) ? options.sort_empty : options.sort,\n\t\tsort_flds:T.Sort[]\t\t= [],\n\t\tmultipliers:number[]\t= [];\n\n\n\t\tif( typeof sort == 'function' ){\n\t\t\treturn sort.bind(this);\n\t\t}\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t */\n\t\tconst get_field = function(name:string, result:T.ResultItem):string|number {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn search.getAttrFn(self.items[result.id], name);\n\t\t};\n\n\t\t// parse options\n\t\tif (sort) {\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\tsort_flds.push(sort[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tsort_flds.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\tsort_flds.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\tmultipliers.push(sort_flds[i].direction === 'desc' ? -1 : 1);\n\t\t}\n\n\t\t// build function\n\t\tconst sort_flds_count = sort_flds.length;\n\t\tif (!sort_flds_count) {\n\t\t\treturn null;\n\t\t} else if (sort_flds_count === 1) {\n\t\t\tconst sort_fld = sort_flds[0].field;\n\t\t\tconst multiplier = multipliers[0];\n\t\t\treturn function(a:T.ResultItem, b:T.ResultItem) {\n\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\tget_field(sort_fld, a),\n\t\t\t\t\tget_field(sort_fld, b)\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(a:T.ResultItem, b:T.ResultItem) {\n\t\t\t\tvar i, result, field;\n\t\t\t\tfor (i = 0; i < sort_flds_count; i++) {\n\t\t\t\t\tfield = sort_flds[i].field;\n\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t */\n\tprepareSearch(query:string, optsUser:Partial<T.Options>):T.PrepareObj {\n\t\tconst weights:T.Weights = {};\n\t\tvar options\t\t= Object.assign({},optsUser);\n\n\t\tpropToArray(options,'sort');\n\t\tpropToArray(options,'sort_empty');\n\n\t\t// convert fields to new format\n\t\tif( options.fields ){\n\t\t\tpropToArray(options,'fields');\n\t\t\tconst fields:T.Field[] = [];\n\t\t\toptions.fields.forEach((field:string|T.Field) => {\n\t\t\t\tif( typeof field == 'string' ){\n\t\t\t\t\tfield = {field:field,weight:1};\n\t\t\t\t}\n\t\t\t\tfields.push(field);\n\t\t\t\tweights[field.field] = ('weight' in field) ? field.weight : 1;\n\t\t\t});\n\t\t\toptions.fields = fields;\n\t\t}\n\n\n\t\treturn {\n\t\t\toptions\t\t: options,\n\t\t\tquery\t\t: query.toLowerCase().trim(),\n\t\t\ttokens\t\t: this.tokenize(query, options.respect_word_boundaries, weights),\n\t\t\ttotal\t\t: 0,\n\t\t\titems\t\t: [],\n\t\t\tweights\t\t: weights,\n\t\t\tgetAttrFn\t: (options.nesting) ? getAttrNesting : getAttr,\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t */\n\tsearch(query:string, options:T.Options) : T.PrepareObj {\n\t\tvar self = this, score, search:T.PrepareObj;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tconst fn_score = options.score || self._getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\titerate(self.items, (item:T.ResultItem, id:string|number) => {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\titerate(self.items, (_:T.ResultItem, id:string|number) => {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tconst fn_sort = self._getSortFunction(search);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n}\n"],"names":["latin_pat","accent_pat","accent_reg","RegExp","diacritic_patterns","latin_convert","convert_pat","Object","keys","join","code_points","asciifold","str","normalize","replace","toLowerCase","foreignletter","arrayToPattern","chars","glue","length","longest","forEach","a","Math","max","escapeToPattern","escaped","map","diacritic","escape_regex","allSubstrings","input","result","substring","subresult","tmp","slice","charAt","push","unshift","generateDiacritics","diacritics","code_range","i","String","fromCharCode","latin","patt","match","latin_chars","sort","b","substrings","pattern","sub_pat","l","hasOwnProperty","diacriticRegexPoints","regex","undefined","decomposed","split","part","no_accent","getAttr","obj","name","getAttrNesting","names","shift","scoreValue","value","token","weight","score","pos","search","string","propToArray","key","Array","isArray","iterate","object","callback","cmp","Sifter","constructor","items","settings","tokenize","query","respect_word_boundaries","weights","tokens","words","field_regex","word","field_match","field","getScoreFunction","options","prepareSearch","_getScoreFunction","token_count","fields","field_count","getAttrFn","scoreObject","data","sum","conjunction","getSortFunction","_getSortFunction","n","implicit_score","self","sort_empty","sort_flds","multipliers","bind","get_field","id","direction","splice","sort_flds_count","sort_fld","multiplier","optsUser","assign","trim","total","nesting","fn_score","item","filter","_","fn_sort","limit"],"mappings":"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"}